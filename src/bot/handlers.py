"""Bot handlers for processing user messages."""
import logging

from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..database.models import User

logger = logging.getLogger(__name__)

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession) -> None:
    """Handle /start command.
    
    Args:
        message: Telegram message
        session: Database session
    """
    telegram_id = message.from_user.id
    
    # Check if user exists
    result = await session.execute(
        select(User).where(User.telegram_id == telegram_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        # Create new user
        user = User(
            telegram_id=telegram_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        session.add(user)
        await session.commit()
        logger.info(f"New user created: {telegram_id}")
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –†–æ–¥–Ω—É–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ Remnawave.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"
    )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Handle /help command.
    
    Args:
        message: Telegram message
    """
    await message.answer(
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ Remnawave.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )


@router.message(Command("status"))
async def cmd_status(message: Message, session: AsyncSession) -> None:
    """Handle /status command.
    
    Args:
        message: Telegram message
        session: Database session
    """
    from ..database.models import Subscription
    
    telegram_id = message.from_user.id
    
    # Get user subscription
    result = await session.execute(
        select(Subscription)
        .where(Subscription.telegram_id == telegram_id)
        .where(Subscription.is_active == True)
    )
    subscription = result.scalar_one_or_none()
    
    if subscription:
        if subscription.expires_at:
            await message.answer(
                f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            await message.answer("‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è!")
    else:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
